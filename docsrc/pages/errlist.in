<title>SQLite Error List</title>

<tcl>
proc ERROR_MSG {text desc} {
}

ERROR_MSG {there is already another table or index with this name: NAME} {
  This error results when an [ALTER TABLE] statement attempts to rename
  a table to a name of an existing table.
}

ERROR_MSG {table NAME may not be altered} {
  The [ALTER TABLE] command attempted to rename a table which is not
  allowed to be renamed.  Any table whose name begins with "sqlite_"
  is a system table and may not be renamed.
}

ERROR_MSG {view NAME may not be altered} {
  The [ALTER TABLE] command attempted to rename a view
}

ERROR_MSG {Cannot add a PRIMARY KEY column} {
  The [ALTER TABLE] command attempted to add a PRIMARY KEY column.
}

ERROR_MSG {Cannot add a UNIQUE column} {
  The [ALTER TABLE] command attempted to add a UNIQUE column.
}

ERROR_MSG {Cannot add a NOT NULL column with default value NULL} {
  The [ALTER TABLE] command attempted to add a NOT NULL column that
  lacks a explicit default value or which has a default value of NULL.
}

ERROR_MSG {Cannot add a column with non-constant default} {
  Columns added by the [ALTER TABLE] must have a constant default value.
}

ERROR_MSG {virtual tables may not be altered} {
  The [ALTER TABLE] command cannot be applied to [virtual tables].
}

ERROR_MSG {Cannot add a column to a view} {
  The [ALTER TABLE] command cannot be used to add a new column to a 
  [CREATE VIEW | view]
}

ERROR_MSG {invalid name: "NAME"} {
  The arguments to the [ATTACH] and [DETACH] commands must be simple
  string literals or bound parameters.  For example:  'file.db' or :db1.
  They cannot be expressions, even expressions that resolve to string
  literals.

  Why?  Can we not drop this restriction and in so doing simplify the
  code (by removing the test for the restriction) while simultaneously
  allowing some interesting constructs like (for example):
  "ATTACH (select filename from resources where type='toattach') AS new1"
}

ERROR_MSG {index/trigger/view NAME cannot reference objects in database DATABASE} {
  Indices must index tables in the same database.
  Triggers and views other than TEMP triggers and views
  must be defined on and reference only tables in the
  same database.
}

ERROR_MSG {authorizer malfunction} {
  The callback function invoked by [sqlite3_set_authorizer] is suppose to
  return one of the constants:  [SQLITE_OK], [SQLITE_IGNORE], or
  [SQLITE_DENY].  If the callback returns anything other than one of these
  three constants, this error message results.
}

ERROR_MSG {access to DATABASE.TABLE.NAME is prohibited} {
  The callback function invoked by [sqlite3_set_authorizer] returned
  [SQLITE_DENY] when asked if a query could access the indicated value.
}

ERROR_MSG {not authorized} {
  The callback function invoked by [sqlite3_set_authorizer] returned
  [SQLITE_DENY] when asked for permission to perform a certain operation.
}

ERROR_MSG {unknown database DATABASE} {
  The token DATABASE was used as a database name qualifier no a table
  reference but no such database is currently attached.
}

ERROR_MSG {source and destination must be distinct} {
  The source and destination databases in a [sqlite3_backup_init] must
  no be the same database.
}

ERROR_MSG {no such view/table: DATABASE.NAME} {
  A reference to the view or table called NAME could not be resolved.
}

ERROR_MSG {corrupt database} {
  One of the CREATE statements in the schema of a database stored in 
  the sqlite_master table contains a name that includes a database
  name modifier.
}

ERROR_MSG {unknown database DATABASE} {
  An object name contains a database specifier prefix which is not
  recognized.
}

ERROR_MSG {object name reserved for internal use: NAME} {
  Table, view, trigger, and index names may not begin with "sqlite_".
  Such names are reserved for the exclusive use of SQLite itself.
}

ERROR_MSG {temporary table name must be unqualified} {
  When creating a TEMP table, the format should be either
  "CREATE TABLE temp.name ..." or "CREATE TEMP TABLE name ...".
  On may not say "CREATE TEMP TABLE temp.name ...".
}

ERROR_MSG {table NAME already exists} {
  Attempt to create a new table with the same name as an existing table.
}

ERROR_MSG {there is already an index named NAME} {
  While attempting to create a new table called NAME it was discovered
  that there already exists an index with that same name.
}

ERROR_MSG {too many columns on NAME} {
  While attempting to create a new table called NAME it was seen that
  the number of columns in the table exceeds the limit imposed
  by [SQLITE_LIMIT_COLUMN].

  ToDo:  Does the ALTER TABLE ... ADD COLUMN statement check this
  limit to make sure it is not exceeded?
}

ERROR_MSG {duplicate column name: NAME} {
  A [CREATE TABLE] statement constains two more more columns called NAME.
}

ERROR_MSG {default value of column [NAME] is not constant} {
  The argument to a DEFAULT VALUE in a CREATE TABLE statement must
  be composed of literal values or function calls.  Subqueries or other
  references to the same or other tables are not allowed.
}

ERROR_MSG {table "NAME" has more than one primary key} {
  Each table can have zero or one PRIMARY KEYs; no more.  The PRIMARYKEY
  can contain multiple columns, but there can only be one PRIMARY KEY.
}

ERROR_MSG {AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY} {
  The AUTOINCREMENT keyword in SQLite is not like MySQL.  It can
  only be used on an INTEGER PRIMARY KEY column.
}

ERROR_MSG {no such collation sequence: NAME} {
  The collating sequence called NAME is not currently registered with
  the database connection.
}

ERROR_MSG {parameters are not allowed in views} {
  The right-hand side of a CREATE VIEW (that is to say,
  the SELECT statement that defines the view) may not contain
  bound parameter names like "?", "?123", ":term", "@xyz", or "$var".
}

ERROR_MSG {view NAME is circularly defined} {
  Views may be defined in terms of other views to any depth.  However,
  the tree of view definitions may not contain loops.
}

ERROR_MSG {table NAME may not be dropped} {
  Tables whose names begin with "sqlite_" are reserved for use by 
  SQLite itself and my not be dropped using the [DROP TABLE] command.
}

ERROR_MSG {use DROP TABLE to delete table NAME} {
  One cannot use the [DROP VIEW] command to drop a table.

  Why not?  Is this a restriction we can relax and in so doing
  simplify the code?
}

ERROR_MSG {use DROP VIEW to delete view NAME} {
  One cannot use the [DROP TABLE] command to drop a view.

  Why not?  Is this a restriction we can relax and in so doing
  simplify the code?
}

ERROR_MSG {foreign key on TABLE should reference only one column of table OTHER} {
  This is really about the same thing as the next error.
}

ERROR_MSG {number of columns in foreign key does not match the number of columns in the referenced table} {
  Exactly what it says.
}

ERROR_MSG {unknown column "NAME" in foreign key definition} {
  The table being defined has no column called NAME.
}

ERROR_MSG {table TABLE may not be indexed} {
  SQLite does not allow the creation of indices on system tables whose
  names begin wth "sqlite_".

  What is this exception for "sqlite_altertab_" that I see in the code?
  Is that some bit of legacy that we need to remove?
}

ERROR_MSG {views may not be indexed} {
  One may not create an index on a view.  Only tables can be indexed.
}

ERROR_MSG {virtual tables may not be indexed} {
  One may not create an index on a virtual table.  Only real b-tree tables
  may be indexed.
}

ERROR_MSG {there is already a table named NAME} {
  The name of an index cannot be the same as the name of an
  existing table.
}

ERROR_MSG {index NAME already exists} {
  A [CREATE INDEX] statement without an IF NOT EXISTS clause names
  an index that already exists.
}

ERROR_MSG {table TABLE has no column named NAME} {
  A [CREATE INDEX] statement has attempted to create an index on a table
  column that does not exist.
}

ERROR_MSG {conflicting ON CONFLICT clauses specified} {
  Two or more conflicting ON CONFLICT clauses.  For example:

     PRIMARY KEY(a) ON CONFLICT REPLACE, UNIQUE(a) ON CONFLICT IGNORE

}

ERROR_MSG {no such index: NAME} {
  Unknown index specified on a [DROP INDEX] command that omits the
  IF EXISTS clause.
}

ERROR_MSG {index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped} {
  The automatically created index associated with a UNIQUE or PRIMARY KEY
  constraint cannot be dropped.

  There is a special flag in the Index structure to indicate that it is
  an automatic index - the autoIndex flag.  I wonder if we can remove that
  field from the Index structure and simply refuse to drop indices whose
  names being with "sqlite_"?
}

ERROR_MSG {unable to open a temporary database file for storing temporary tables} {
  This occurs when unable to allocate and open the temporary file the first
  time a CREATE TEMP TABLE statement is seen.
}

ERROR_MSG {unable to identify the object to be reindexed} {
  The argument to the [REINDEX] command is not a table or collating sequence.
}

ERROR_MSG {no such collation sequence: NAME} {
  Attempt to use a collating sequence called NAME but no such collating
  sequence is currently defined.
}

ERROR_MSG {table NAME may not be modified} {
  The table is read-only cannot be changed by [DELETE], [UPDATE], or [INSERT].
}

ERROR_MSG {cannot modify NAME because it is a view} {
  Attempt to run a [DELETE], [UPDATE], or [INSERT] statement on a view that
  lacks the appropriate [INSTEAD OF] trigger for redirecting the action.
}

ERROR_MSG {ORDER BY without LIMIT on DELETE/UPDATE} {
  This message only appears when compiled with
  [SQLITE_ENABLE_UPDATE_DELETE_LIMIT].  A [DELETE] or [UPDATE] statement
  contains an ORDER BY clause but no LIMIT clause.
}

ERROR_MSG {Expression tree is too large (maximum depth NNNN)} {
  The depth of an expression tree exceeds the limit imposed by
  [SQLITE_LIMIT_EXPR_DEPTH].
}

ERROR_MSG {near "TOKEN": syntax error} {
  This error is generated whenever the SQL parser encounters some construct
  that it cannot make sense of.
}

ERROR_MSG {variable number must be between ?1 and ?NNN} {
  The numeric value of a bound parameter is less than 1 or larger than
  the limit imposed by [SQLITE_LIMIT_VARIABLE_NUMBER].
}

ERROR_MSG {too many SQL variables} {
  There are so many bound parameters (ex: ?, ?123, :abc, @xyz, $var) within
  an SQL statement that the maximum number of bound parameters
  determined by [SQLITE_LIMIT_VARIABLE_NUMBER] is exceeded.
}

ERROR_MSG {too many columns in index/set list} {
  The number of columns in an index or in the list of values on the 
  right-hand side of an IN statement is greater than the limit
  imposed by [SQLITE_LIMIT_COLUMN].
}

ERROR_MSG {misuse of aggregate: NAME} {
  An aggregate function is used in a context where it does not make
  sense, such as in a non-aggregate query, or as an argument to another
  aggregate function.
}

ERROR_MSG {RAISE() may only be used within a trigger-program} {
  The special RAISE() function can only occurs within a TRIGGER.
}

ERROR_MSG {table NAME has NNN columns but NNN values were supplied} {
  An an [INSERT] statement, the number of values on the right does not
  match the number of columns in the table on the left.
}

ERROR_MSG {NNN values for NNN columns} {
  An an [INSERT] statement, the number of values on the right does not
  match the number of columns in the explicit column list of the table
  on the left.
}

ERROR_MSG {table %S has no column named %s} {
  The column list on an [INSERT] statement names a column which is not
  in the table.
}

ERROR_MSG {automatic extension loading failed: %s} {
  One of the automatically loaded extensions defined using
  [sqlite3_auto_extension()] returned an error message.
}

ERROR_MSG {unable to close due to unfinalised statements} {
  The [sqlite3_close()] routine failed because there are one or more
  unfinalized prepared statements.
}

ERROR_MSG {unable to close due to unfinished backup operation} {
  The [sqlite3_close()] routine failed because there are one or more
  [sqlite3_backup] objects outstanding on the connection.
}

ERROR_MSG {unable to delete/modify user-function due to active statements} {
  There are [prepared statements] currently running on the database
  connection and therefore calls the [sqlite3_create_function()] (or 
  related routines) are not allowed so as not to change or delete
  function implementations out from under a running prepared statement.
}

ERROR_MSG {unable to delete/modify collation sequence due to active statements} {
  There are [prepared statements] currently running on the database
  connection and therefore calls the [sqlite3_create_collation()] (or 
  related routines) are not allowed so as not to change or delete
  collating function implementations out from under a running
  prepared statement.
}

ERROR_MSG {no such vfs: %s} {
  The fourth parameter to [sqlite3_open_v2()] specified a
  [sqlite3_vfs | VFS] that has not currently registered using
  [sqlite3_vfs_register()].
}

ERROR_MSG {no such table column: %s.%s} {
  In a call to [sqlite3_table_column_metadata()], the table and column
  named as arguments in the function call do not correspond to any table
  and column in the current schema.
}

ERROR_MSG {database is deadlocked} {
  The [sqlite3_unlock_notify()] interface returns this message if blocking
  the most recent database operation would result in deadlock.
}

ERROR_MSG {near "%T": syntax error} {
  When the parser is unable to analyze the input SQL token stream, it
  returns this error.
}

ERROR_MSG {parser stack overflow} {
  The parser is implemented by a push-down automaton with a finite
  stack size.  Deeply nested expressions might cause the push-down
  automatons stack to overflow, resulting in this error message.
}

ERROR_MSG {too many arguments on function %T} {
  The parser found an SQL function call that contains more than the
  maximum number of allowed arguments in an SQL function (255).
}

ERROR_MSG {temporary storage cannot be changed from within a transaction} {
  The [temp_store pragma] and the [temp_store_directory pragma] cannot
  be called from within an explicit transaction.
}

ERROR_MSG {not a writable directory} {
  The [temp_store_directory pragma] specified a new directory for temporary
  files which does not exist or which is not writable.
}

ERROR_MSG {failed to set lock proxy file} {
  The lock_proxy_file pragma (which is only available on Macs when compiled
  with [SQLITE_ENABLE_LOCKING_STYLE] failed in its attempt to set the
  lock proxy file.
}

ERROR_MSG {Safety level may not be changed inside a transaction} {
  The [synchronous pragma] cannot be used from within an
  explicit transaction.
}

ERROR_MSG {unsupported encoding: %s} {
  The [encoding pragma] specified an encoding that was unrecognized.
}

ERROR_MSG {database schema is locked: %s} {
  This error message is generated by [sqlite3_prepare()] and related functions
  when it is not possible to get a read lock on all
  database schemas.  The inability to get a read lock indicates that
  some other database connection is holding a write-lock, which in
  turn means that the other connection has made uncommitted changes
  to the schema.

  Were we to proceed and prepare the statement against the uncommitted
  schema changes and if those schema changes are subsequently rolled
  back and different changes are made in their place, then when this
  prepared statement goes to run the schema cookie would fail to detect
  the schema change.  Disaster would follow.
}

ERROR_MSG {statement too long} {
  An SQL statement submitted to [sqlite3_prepare()] or a related routine
  exceeds the length limit imposed by [SQLITE_LIMIT_SQL_LENGTH].
}

ERROR_MSG {misuse of aliased aggregate %s} {
  ToDo: figure out what this means, exactly....
}

ERROR_MSG {no such column %s.%s.%s} {
  A reference to a column could not be resolved
}

ERROR_MSG {ambiguous column name %s.%s.%s} {
  A reference to a column could mean two or more different instances of
  that column.
}

ERROR_MSG {not authorized to use function: %s} {
  The callback from [sqlite3_set_authorizer()] indicates that permission
  to call a particular SQL function is denied.
}

ERROR_MSG {misuse of aggregate function %s()} {
  An aggregate function is used in a context where it is not allowed,
  such as in a LIMIT clause.

  ToDo:  What are other examples of places where aggregate functions
  are not allowed?
}

ERROR_MSG {no such function: %s} {
  An expression makes reference to an SQL function which is not
  recognized.
}

ERROR_MSG {wrong number of arguments to function %s()} {
  An expression calls an SQL function but gives it the wrong number
  of arguments.
}

ERROR_MSG {subqueries prohibited in CHECK constraints} {
  A CHECK constraint may not contain subqueries.
}

ERROR_MSG {parameters prohibited in CHECK constraints} {
  Bound parameters are prohibited in CHECK constraints.
}

ERROR_MSG {%d-th ORDER/GROUP BY term out of range - should be between 1 and %d} {
  The Nth term of an ORDER BY or GROUP BY expression is an integer constant.
  But that constant is either less than 1 or greater than the number of
  columns in the result set of the query.
}

ERROR_MSG {too many terms in ORDER BY clause} {
  The number of terms in an ORDER BY clause exceeds the limit imposed
  by [SQLITE_LIMIT_COLUMN].
}

ERROR_MSG {%d-th ORDER BY term does not match any column in the result set} {
  In a compound query statement, all terms of the ORDER BY clause must 
  either be an integer constant referring to one of the result set columns,
  or must be an exact replicate of a result set column.  This error is
  returned if neither is the case.
}

ERROR_MSG {too many terms in ORDER/GROUP BY clause} {
  The number of terms in an ORDER BY clause exceeds the limit imposed
  by [SQLITE_LIMIT_COLUMN].
}

ERROR_MSG {a GROUP BY clause is required before HAVING} {
  Self explanatory
}

ERROR_MSG {ggregate functions are not allowed in the GROUP BY clause}  {
  self explanatory
}

ERROR_MSG {unknown or unsupported join type: %s} {
  The SQLite does not understand what type of join it is suppose to
  do or else it does not implement the specified join type.
}

ERROR_MSG {RIGHT and FULL OUTER JOINs are not currently supported} {
  self explanatory
}

ERROR_MSG {a NATURAL join may not have an ON or USING clause} {
  self explanatory
}

ERROR_MSG {cannot have both ON and USING clauses in the same join} {
  self explanatory
}

ERROR_MSG {cannot join using column %s - column not present in both tables} {
  This occurs when a USING clause in a join specifies a column that is
  missing from one or the other of the two tables being joined.
}

ERROR_MSG {only a single result allowed for a SELECT that is part of an expression} {
  When a subquery is an element of an expression, it can only have a
  single result column.
}

ERROR_MSG {ORDER BY clause should come after UNION/EXCEPT/INTERSECT not before} {
  In a compound query, the ORDER BY clause must come at the very end
}

ERROR_MSG {LIMIT clause should come after UNION/EXCEPT/INTERSECT not before} {
  In a compound query, the LIMIT clause must come at the very end
}

ERROR_MSG {SELECTs to the left and right of UNION/EXCEPT/INTERSECT do not have the same number of result columns} {
  All components of a compound query must have the same number of 
  result columns.
}

ERROR_MSG {no such index: %s} {
  The index named in an INDEXED BY clause could not be found
}

ERROR_MSG {no such table: %s} {
  In a SELECT statement with a result set of the form TABLE.*, no table
  corresponding to TABLE could be found for the purpose of expanding the
  * into an actual set of columns.
}

ERROR_MSG {no tables specified} {
  A "*" is used in the result set of a SELECT statement that has no
  FROM clause.
}

ERROR_MSG {too many columns in result set} {
  The number of columns in the result set of a SELECT statement
  exceeds the limit imposed by [SQLITE_LIMIT_COLUMN].
}

ERROR_MSG {DISTINCT aggregates must have exactly one argument} {
  It is not allowed to use the DISTINCT qualifier on aggregate
  functions that have two or more arguments.
}

ERROR_MSG {too many terms in compound SELECT} {
  The number of result set columns in a compound SELECT statement
  exceeds the limit imposed by [SQLITE_COLUMN_LIMIT].
}

ERROR_MSG {temporary trigger may not have qualified name} {
  One may say "CREATE TEMP TRIGGER name..." or
  "CREATE TRIGGER temp.name..." but not "CREATE TEMP TRIGGER temp.name...".
}

ERROR_MSG {cannot create triggers on virtual tables} {
  self explanatory
}

ERROR_MSG {trigger %s already exists} {
  A [CREATE TRIGGER] statement has attempted to create a new trigger
  with the same name as an existing trigger.
}

ERROR_MSG {cannot create trigger on system table} {
  Triggers cannot be created no tables whose names begin with "sqlite_".
}

ERROR_MSG {cannot create BEFORE/AFTER trigger on view: %s} {
  BEFORE and AFTER triggers can only be created on real btree tables, 
  not on views.  Only INSTEAD OF triggers can be created on views.
}

ERROR_MSG {cannot create INSTEAD OF trigger on table: %s} {
  INSTEAD OF triggers cannot be created on tables, only on views.
}

ERROR_MSG {no such trigger: %s} {
  Cannot locate the trigger named in a [DROP TRIGGER] statement.
}

ERROR_MSG {no such column: %s} {
  In an UPDATE OF trigger where the OF keyword is followed by a list
  of column names which must change in order for the trigger to fire,
  one of the column names in the list is not a column of the table.
}

ERROR_MSG {cannot open virtual table: %s} {
  The [sqlite3_blob_open()] function only works on real btree tables,
  not on virtual tables.
}

ERROR_MSG {cannot open view: %s} {
  The [sqlite3_blob_open()] function only works on real btree tables,
  not on views.
}

ERROR_MSG {no such column: "%s"} {
  The fourth argument to [sqlite3_blob_open()] specifies a column which
  is not in the table.
}

ERROR_MSG {cannot open indexed column for writing} {
  The [sqlite3_blob_open()] interface cannot open an indexed column for
  writing.
}

ERROR_MSG {cannot open value of type null/real/integer} {
  The [sqlite3_blob_open()] interface can only open values of type
  BLOB and TEXT.
}

ERROR_MSG {no such rowid: %d} {
  The fifth argument to [sqlite3_blob_open()] specifies a rowid that
  does not exist in the table.
}

ERROR_MSG {Cannot use virtual tables in shared-cache mode} {
  ToDo:  We need to relax this constraint, if we can.  Is it possible that
  some virtual tables might be usable in shared-cache mode, as long as they
  do not hold any database-connection specific resources?
}

ERROR_MSG {no such module: %s} {
  This is the message returned when a [CREATE VIRTUAL TABLE] statement
  specifies a [sqlite3_module | virtual table module] that is unknown.
}

ERROR_MSG {table %s: xBestIndex returned an invalid plan} {
  This message results when a defective virtual table implementation
  returns an invalid plan from its xBestIndex method.
}

ERROR_MSG {at most 64 tables in a join} {
  A join in SQLite can have at most 64 tables.
}

ERROR_MSG {cannot use index: %s} {
  When the INDEXED BY clause is used in a query but the specified index
  cannot be used to accomplish the query, this message is returned.
}

ERROR_MSG {integer overflow} {
  This error results when abs(-9223372036854775808) is invoked.  Because
  the largest possible positive intege is 9223372036854775807, it is not
  possible to take the absolute value of -9223372036854775808.
}

ERROR_MSG {LIKE or GLOB pattern too complex} {
  The right-hand side of a LIKE or GLOB operator exceeds the limit
  imposed by [SQLITE_LIMIT_LIKE_PATTERN_LENGTH].
}

ERROR_MSG {ESCAPE expression must be a single character} {
  The ESCAPE string on a LIKE operator must be exactly one
  character long.
}

ERROR_MSG {integer overflow} {
  If all arguments to the SUM() aggregate are integers but the total
  amount exceeds the largest possible integer, then this error results.
}

ERROR_MSG {string or blob too big} {
  This error results when an SQL function implementation calls the
  [sqlite3_result_error_toobig()] interface.
}

ERROR_MSG {indexed columns are not unique} {
  This occurs when creating a new index or when running [REINDEX].  While
  populating a unique index, two or more rows with the same values for
  all indexed columns were found.
}

ERROR_MSG {%s.%s may not be NULL} {
  This error is issued on an attempt to insert a NULL value into
  a NOT NULL column.
}

ERROR_MSG {PRIMARY KEY must be unique} {
  This error is issued on an attempt to insert a non-unique value
  into the primary key of a table.
}

ERROR_MSG {columns ... are not unique} {
  This error is issued when trying to insert a new row into a
  table where the new row violates a uniqueness constraint.
}

ERROR_MSG {PRIMARY KEY must be unique} {
  This error is issued on an attempt to insert a row with a
  duplicate integer primary key.
}

ERROR_MSG {cannot open savepoint - SQL statements in progress} {
  A [SAVEPOINT] can only be started when no other [prepared statements]
  are simultaneously attempting to modify the database.
}

ERROR_MSG {no such savepoint: %s} {
  An attempt to [ROLLBACK] TO or [RELEASE] a [SAVEPOINT] which does
  not exist.
}

ERROR_MSG {cannot rollback/release savepoint - SQL statements in progress} {
  A [ROLLBACK] TO a [SAVEPOINT] can only occur when
  no other prepared statements are reading.  A [RELEASE] to of a [SAVEPOINT]
  can only occur when no other prepared statements are writing.
}

ERROR_MSG {cannot rollback transaction - SQL statements in progress} {
  The message results on an attempt to [ROLLBACK] while other statements
  are unfinalized.
}

ERROR_MSG {cannot commit transaction - SQL statements in progress} {
  This message results on an attempt to [COMMIT] while other statements
  are writing to the database.
}

ERROR_MSG {cannot start a transaction within a transaction} {
}

ERROR_MSG {cannot rollback - no transaction is active} {
}

ERROR_MSG {cannot commit - no transaction is active} {
}

ERROR_MSG {database schema has changed} {
  A prepared statement was compiled using a prior version of the
  schema and is hence no longer valid.
}

ERROR_MSG {database table is locked: %s} {
  Attempt to read or write from a table that is already in use by another
  database connection in shared cache mode.
}

ERROR_MSG {read-only table} {
  An attempt to [DELETE], [INSERT], or [UPDATE] on a [virtual table] that
  lacks an [xUpdate] method.
}

ERROR_MSG {string or blob too big} {
  Some opcode in the virtual machine failed due to a string or blob
  that exceeded the size bound set by [SQLITE_LIMIT_LENGTH].
}

ERROR_MSG {out of memory} {
  The VDBE halted prematurely because of an out-of-memory error.
}

ERROR_MSG {SQL logic error or missing database} {
  The SQLITE_ERROR error code
}
ERROR_MSG {access permission denied} {
  The SQLITE_PERM error code.
}

ERROR_MSG {callback requested query abort} {
  The SQLITE_ABORT error code.
}

ERROR_MSG {database is locked} {
  The SQLITE_BUSY error code.
}

ERROR_MSG {database table is locked} {
  The SQLITE_LOCKED error code.
}

ERROR_MSG {out of memory} {
  The SQLITE_NOMEM error code.
}

ERROR_MSG {attempt to write a readonly database} {
  The SQLITE_READONLY error code.
}

ERROR_MSG {interrupted} {
  The SQLITE_INTERRUPT error code.
}

ERROR_MSG {disk I/O error} {
  The SQLITE_IOERR error code.
}

ERROR_MSG {database disk image is malformed} {
  The SQLITE_CORRUPT error code.
}

ERROR_MSG {database or disk is full} {
  The SQLITE_FULL error code.
}

ERROR_MSG {unable to open database file} {
  The SQLITE_CANTOPEN error code.
}

ERROR_MSG {table contains no data} {
  The SQLITE_EMPTY error code.
}

ERROR_MSG {database schema has changed} {
  The SQLITE_SCHEMA error code.
}

ERROR_MSG {String or BLOB exceeded size limit} {
  The SQLITE_TOOBIG error code.
}

ERROR_MSG {constraint failed} {
  The SQLITE_CONSTRAINT error code.
}

ERROR_MSG {datatype mismatch} {
  The SQLITE_MISMATCH error code.
}

ERROR_MSG {library routine called out of sequence} {
  The SQLITE_MISUSE error code.
}

ERROR_MSG {large file support is disabled} {
  The SQLITE_NOLFS error code.
}

ERROR_MSG {authorization denied} {
  The SQLITE_AUTH error code.
}

ERROR_MSG {auxiliary database format error} {
  The SQLITE_FORMAT error code.
}

ERROR_MSG {bind or column index out of range} {
  The SQLITE_RANGE error code.
}

ERROR_MSG {file is encrypted or is not a database} {
  The SQLITE_NOTADB error code.
}

# End of ERROR list.

hd_puts {<h2>Error List</h2>
<p>This is a place holder for upcoming, comprehensive documentation
on the errors returned by SQLite.</p>
}

</tcl>
