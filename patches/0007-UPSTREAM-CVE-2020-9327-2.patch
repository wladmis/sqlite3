From 4033886bc4e468d1cac7e993bcaea41807b8f5f6 Mon Sep 17 00:00:00 2001
From: "Vladimir D. Seleznev" <vseleznv@altlinux.org>
Date: Tue, 19 May 2020 15:31:37 +0300
Subject: [PATCH 7/9] UPSTREAM: CVE-2020-9327 #2

https://www.sqlite.org/cgi/src/info/abc473fb8fb99900
---
 sqlite/src/expr.c      | 25 +++++++++++--------------
 sqlite/src/sqliteInt.h |  4 +++-
 sqlite/src/whereexpr.c | 12 ++++++++----
 3 files changed, 22 insertions(+), 19 deletions(-)

diff --git a/sqlite/src/expr.c b/sqlite/src/expr.c
index b33d1375f..7ba89d96e 100644
--- a/sqlite/src/expr.c
+++ b/sqlite/src/expr.c
@@ -2244,15 +2244,6 @@ int sqlite3ExprIsInteger(Expr *p, int *pValue){
   return rc;
 }
 
-/*
-** Return true if p is a Column node that references a virtual table.
-*/
-int sqlite3ExprIsVtabRef(Expr *p){
-  if( p->op!=TK_COLUMN ) return 0;
-  if( p->y.pTab==0 ) return 0;
-  return IsVirtual(p->y.pTab);
-}
-
 /*
 ** Return FALSE if there is no chance that the expression can be NULL.
 **
@@ -5472,19 +5463,25 @@ static int impliesNotNullRow(Walker *pWalker, Expr *pExpr){
     case TK_LT:
     case TK_LE:
     case TK_GT:
-    case TK_GE:
+    case TK_GE: {
+      Expr *pLeft = pExpr->pLeft;
+      Expr *pRight = pExpr->pRight;
       testcase( pExpr->op==TK_EQ );
       testcase( pExpr->op==TK_NE );
       testcase( pExpr->op==TK_LT );
       testcase( pExpr->op==TK_LE );
       testcase( pExpr->op==TK_GT );
       testcase( pExpr->op==TK_GE );
-      if( sqlite3ExprIsVtabRef(pExpr->pLeft)
-       || sqlite3ExprIsVtabRef(pExpr->pRight)
+      /* The y.pTab=0 assignment in wherecode.c always happens after the
+      ** impliesNotNullRow() test */
+      if( (pLeft->op==TK_COLUMN && ALWAYS(pLeft->y.pTab!=0)
+                               && IsVirtual(pLeft->y.pTab))
+       || (pRight->op==TK_COLUMN && ALWAYS(pRight->y.pTab!=0)
+                               && IsVirtual(pRight->y.pTab))
       ){
-       return WRC_Prune;
+        return WRC_Prune;
       }
-
+    }
     default:
       return WRC_Continue;
   }
diff --git a/sqlite/src/sqliteInt.h b/sqlite/src/sqliteInt.h
index d33d87e4f..9ef2437b0 100644
--- a/sqlite/src/sqliteInt.h
+++ b/sqlite/src/sqliteInt.h
@@ -2153,8 +2153,11 @@ struct Table {
 */
 #ifndef SQLITE_OMIT_VIRTUALTABLE
 #  define IsVirtual(X)      ((X)->nModuleArg)
+#  define ExprIsVtab(X)  \
+              ((X)->op==TK_COLUMN && (X)->y.pTab!=0 && (X)->y.pTab->nModuleArg)
 #else
 #  define IsVirtual(X)      0
+#  define ExprIsVtab(X)     0
 #endif
 
 /*
@@ -4279,7 +4282,6 @@ int sqlite3ExprIsTableConstant(Expr*,int);
 int sqlite3ExprContainsSubquery(Expr*);
 #endif
 int sqlite3ExprIsInteger(Expr*, int*);
-int sqlite3ExprIsVtabRef(Expr*);
 int sqlite3ExprCanBeNull(const Expr*);
 int sqlite3ExprNeedsNoAffinityChange(const Expr*, char);
 int sqlite3IsRowid(const char*);
diff --git a/sqlite/src/whereexpr.c b/sqlite/src/whereexpr.c
index e99a44f15..3c91fc353 100644
--- a/sqlite/src/whereexpr.c
+++ b/sqlite/src/whereexpr.c
@@ -377,7 +377,8 @@ static int isAuxiliaryVtabOperator(
     **       MATCH(expression,vtab_column)
     */
     pCol = pList->a[1].pExpr;
-    if( sqlite3ExprIsVtabRef(pCol) ){
+    testcase( pCol->op==TK_COLUMN && pCol->y.pTab==0 );
+    if( ExprIsVtab(pCol) ){
       for(i=0; i<ArraySize(aOp); i++){
         if( sqlite3StrICmp(pExpr->u.zToken, aOp[i].zOp)==0 ){
           *peOp2 = aOp[i].eOp2;
@@ -399,7 +400,8 @@ static int isAuxiliaryVtabOperator(
     ** with function names in an arbitrary case.
     */
     pCol = pList->a[0].pExpr;
-    if( sqlite3ExprIsVtabRef(pCol) ){
+    testcase( pCol->op==TK_COLUMN && pCol->y.pTab==0 );
+    if( ExprIsVtab(pCol) ){
       sqlite3_vtab *pVtab;
       sqlite3_module *pMod;
       void (*xNotUsed)(sqlite3_context*,int,sqlite3_value**);
@@ -422,10 +424,12 @@ static int isAuxiliaryVtabOperator(
     int res = 0;
     Expr *pLeft = pExpr->pLeft;
     Expr *pRight = pExpr->pRight;
-    if( sqlite3ExprIsVtabRef(pLeft) ){
+    testcase( pLeft->op==TK_COLUMN && pLeft->y.pTab==0 );
+    if( ExprIsVtab(pLeft) ){
       res++;
     }
-    if( pRight && sqlite3ExprIsVtabRef(pRight) ){
+    testcase( pRight && pRight->op==TK_COLUMN && pRight->y.pTab==0 );
+    if( pRight && ExprIsVtab(pRight) ){
       res++;
       SWAP(Expr*, pLeft, pRight);
     }
-- 
2.25.4

